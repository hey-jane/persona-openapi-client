=begin
#Persona API Reference

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2023-01-05
Contact: support@withpersona.com
Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module PersonaAPIClient
  class CreateAnInquiryRequestDataAttributes
    # Template ID for flow requirements (use this field if your template ID starts with `tmpl_`). *You must pass in either template-id OR inquiry-template-id OR inquiry-template-version-id*
    attr_accessor :template_id

    # Template ID for flow requirements (use this field if your template ID starts with `itmpl_`). *You must pass in either template-id OR inquiry-template-id OR inquiry-template-version-id*
    attr_accessor :inquiry_template_id

    # Template Version ID for flow requirements (begins with `itmplv_`). *You must pass in either template-id OR inquiry-template-id OR inquiry-template-version-id*
    attr_accessor :inquiry_template_version_id

    # Reference ID to refer to an entity in your user model. This field is deprecated in favor of `meta.auto-create-account-reference-id`.
    attr_accessor :reference_id

    # Account ID to associate with this inquiry
    attr_accessor :account_id

    # Email of the user creating this inquiry in the organization
    attr_accessor :creator_email_address

    # Theme ID for styling. Only available for Legacy 2.0 Inquiries.
    attr_accessor :theme_id

    # BETA FEATURE -- Theme Set ID for styling. Only available for Dynamic Flow Inquiries.
    attr_accessor :theme_set_id

    # If using the Hosted flow, redirect to this URL after completion
    attr_accessor :redirect_uri

    # Unstructured field for your custom use
    attr_accessor :note

    attr_accessor :fields

    # A list of tag names to be associated with the Inquiry.
    attr_accessor :tags

    # BETA FEATURE -- Specify an alternate initial step. Only available for Dynamic Flow Inquiries.
    attr_accessor :initial_step_name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'template_id' => :'template-id',
        :'inquiry_template_id' => :'inquiry-template-id',
        :'inquiry_template_version_id' => :'inquiry-template-version-id',
        :'reference_id' => :'reference-id',
        :'account_id' => :'account-id',
        :'creator_email_address' => :'creator-email-address',
        :'theme_id' => :'theme-id',
        :'theme_set_id' => :'theme-set-id',
        :'redirect_uri' => :'redirect-uri',
        :'note' => :'note',
        :'fields' => :'fields',
        :'tags' => :'tags',
        :'initial_step_name' => :'initial-step-name'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'template_id' => :'String',
        :'inquiry_template_id' => :'String',
        :'inquiry_template_version_id' => :'String',
        :'reference_id' => :'String',
        :'account_id' => :'String',
        :'creator_email_address' => :'String',
        :'theme_id' => :'String',
        :'theme_set_id' => :'String',
        :'redirect_uri' => :'String',
        :'note' => :'String',
        :'fields' => :'CreateAnInquiryRequestDataAttributesFields',
        :'tags' => :'Array<String>',
        :'initial_step_name' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `PersonaAPIClient::CreateAnInquiryRequestDataAttributes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `PersonaAPIClient::CreateAnInquiryRequestDataAttributes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'template_id')
        self.template_id = attributes[:'template_id']
      end

      if attributes.key?(:'inquiry_template_id')
        self.inquiry_template_id = attributes[:'inquiry_template_id']
      end

      if attributes.key?(:'inquiry_template_version_id')
        self.inquiry_template_version_id = attributes[:'inquiry_template_version_id']
      end

      if attributes.key?(:'reference_id')
        self.reference_id = attributes[:'reference_id']
      end

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      end

      if attributes.key?(:'creator_email_address')
        self.creator_email_address = attributes[:'creator_email_address']
      end

      if attributes.key?(:'theme_id')
        self.theme_id = attributes[:'theme_id']
      end

      if attributes.key?(:'theme_set_id')
        self.theme_set_id = attributes[:'theme_set_id']
      end

      if attributes.key?(:'redirect_uri')
        self.redirect_uri = attributes[:'redirect_uri']
      end

      if attributes.key?(:'note')
        self.note = attributes[:'note']
      end

      if attributes.key?(:'fields')
        self.fields = attributes[:'fields']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'initial_step_name')
        self.initial_step_name = attributes[:'initial_step_name']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          template_id == o.template_id &&
          inquiry_template_id == o.inquiry_template_id &&
          inquiry_template_version_id == o.inquiry_template_version_id &&
          reference_id == o.reference_id &&
          account_id == o.account_id &&
          creator_email_address == o.creator_email_address &&
          theme_id == o.theme_id &&
          theme_set_id == o.theme_set_id &&
          redirect_uri == o.redirect_uri &&
          note == o.note &&
          fields == o.fields &&
          tags == o.tags &&
          initial_step_name == o.initial_step_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [template_id, inquiry_template_id, inquiry_template_version_id, reference_id, account_id, creator_email_address, theme_id, theme_set_id, redirect_uri, note, fields, tags, initial_step_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = PersonaAPIClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
