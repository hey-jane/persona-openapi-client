=begin
#Persona API Reference

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2023-01-05
Contact: support@withpersona.com
Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module PersonaAPIClient
  class CaseAttributes
    attr_accessor :status

    attr_accessor :name

    attr_accessor :resolution

    attr_accessor :created_at

    attr_accessor :updated_at

    attr_accessor :assigned_at

    attr_accessor :resolved_at

    attr_accessor :redacted_at

    attr_accessor :sla_expires_at

    attr_accessor :creator_id

    # Possible values: - user - workflow-run  Do not assume this is a static enumeration; Persona may add new values in the future without a versioned update.
    attr_accessor :creator_type

    attr_accessor :assignee_id

    attr_accessor :assigner_id

    # Possible values: - case-assignment-policy - user - workflow-run  Do not assume this is a static enumeration; Persona may add new values in the future without a versioned update.
    attr_accessor :assigner_type

    attr_accessor :resolver_id

    # Possible values: - user - workflow-run  Do not assume this is a static enumeration; Persona may add new values in the future without a versioned update.
    attr_accessor :resolver_type

    attr_accessor :updater_id

    # Possible values: - case-assignment-policy - user - workflow-run  Do not assume this is a static enumeration; Persona may add new values in the future without a versioned update.
    attr_accessor :updater_type

    attr_accessor :tags

    attr_accessor :fields

    attr_accessor :attachments

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'status' => :'status',
        :'name' => :'name',
        :'resolution' => :'resolution',
        :'created_at' => :'created-at',
        :'updated_at' => :'updated-at',
        :'assigned_at' => :'assigned-at',
        :'resolved_at' => :'resolved-at',
        :'redacted_at' => :'redacted-at',
        :'sla_expires_at' => :'sla-expires-at',
        :'creator_id' => :'creator-id',
        :'creator_type' => :'creator-type',
        :'assignee_id' => :'assignee-id',
        :'assigner_id' => :'assigner-id',
        :'assigner_type' => :'assigner-type',
        :'resolver_id' => :'resolver-id',
        :'resolver_type' => :'resolver-type',
        :'updater_id' => :'updater-id',
        :'updater_type' => :'updater-type',
        :'tags' => :'tags',
        :'fields' => :'fields',
        :'attachments' => :'attachments'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'status' => :'String',
        :'name' => :'String',
        :'resolution' => :'String',
        :'created_at' => :'String',
        :'updated_at' => :'String',
        :'assigned_at' => :'String',
        :'resolved_at' => :'String',
        :'redacted_at' => :'String',
        :'sla_expires_at' => :'String',
        :'creator_id' => :'String',
        :'creator_type' => :'String',
        :'assignee_id' => :'String',
        :'assigner_id' => :'String',
        :'assigner_type' => :'String',
        :'resolver_id' => :'String',
        :'resolver_type' => :'String',
        :'updater_id' => :'String',
        :'updater_type' => :'String',
        :'tags' => :'Array<Object>',
        :'fields' => :'Object',
        :'attachments' => :'Array<CaseAttributesAttachmentsInner>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `PersonaAPIClient::CaseAttributes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `PersonaAPIClient::CaseAttributes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'resolution')
        self.resolution = attributes[:'resolution']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'assigned_at')
        self.assigned_at = attributes[:'assigned_at']
      end

      if attributes.key?(:'resolved_at')
        self.resolved_at = attributes[:'resolved_at']
      end

      if attributes.key?(:'redacted_at')
        self.redacted_at = attributes[:'redacted_at']
      end

      if attributes.key?(:'sla_expires_at')
        self.sla_expires_at = attributes[:'sla_expires_at']
      end

      if attributes.key?(:'creator_id')
        self.creator_id = attributes[:'creator_id']
      end

      if attributes.key?(:'creator_type')
        self.creator_type = attributes[:'creator_type']
      end

      if attributes.key?(:'assignee_id')
        self.assignee_id = attributes[:'assignee_id']
      end

      if attributes.key?(:'assigner_id')
        self.assigner_id = attributes[:'assigner_id']
      end

      if attributes.key?(:'assigner_type')
        self.assigner_type = attributes[:'assigner_type']
      end

      if attributes.key?(:'resolver_id')
        self.resolver_id = attributes[:'resolver_id']
      end

      if attributes.key?(:'resolver_type')
        self.resolver_type = attributes[:'resolver_type']
      end

      if attributes.key?(:'updater_id')
        self.updater_id = attributes[:'updater_id']
      end

      if attributes.key?(:'updater_type')
        self.updater_type = attributes[:'updater_type']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'fields')
        self.fields = attributes[:'fields']
      end

      if attributes.key?(:'attachments')
        if (value = attributes[:'attachments']).is_a?(Array)
          self.attachments = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          status == o.status &&
          name == o.name &&
          resolution == o.resolution &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          assigned_at == o.assigned_at &&
          resolved_at == o.resolved_at &&
          redacted_at == o.redacted_at &&
          sla_expires_at == o.sla_expires_at &&
          creator_id == o.creator_id &&
          creator_type == o.creator_type &&
          assignee_id == o.assignee_id &&
          assigner_id == o.assigner_id &&
          assigner_type == o.assigner_type &&
          resolver_id == o.resolver_id &&
          resolver_type == o.resolver_type &&
          updater_id == o.updater_id &&
          updater_type == o.updater_type &&
          tags == o.tags &&
          fields == o.fields &&
          attachments == o.attachments
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [status, name, resolution, created_at, updated_at, assigned_at, resolved_at, redacted_at, sla_expires_at, creator_id, creator_type, assignee_id, assigner_id, assigner_type, resolver_id, resolver_type, updater_id, updater_type, tags, fields, attachments].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = PersonaAPIClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
