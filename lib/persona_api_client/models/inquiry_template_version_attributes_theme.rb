=begin
#Persona API Reference

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2023-01-05
Contact: support@withpersona.com
Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module PersonaAPIClient
  class InquiryTemplateVersionAttributesTheme
    attr_accessor :border_radius

    attr_accessor :border_radius_input

    attr_accessor :border_radius_modal

    attr_accessor :border_width

    attr_accessor :border_width_input

    attr_accessor :button_background_image

    attr_accessor :button_font_weight

    attr_accessor :button_position

    attr_accessor :button_shadow_strength

    attr_accessor :button_text_transform

    attr_accessor :color_button_primary

    attr_accessor :color_button_secondary

    attr_accessor :color_button_secondary_fill

    attr_accessor :color_button_primary_fill_disabled

    attr_accessor :color_button_secondary_fill_disabled

    attr_accessor :color_error

    attr_accessor :color_font

    attr_accessor :color_font_button_primary

    attr_accessor :color_font_button_secondary

    attr_accessor :color_font_small

    attr_accessor :color_font_title

    attr_accessor :color_icon_header

    attr_accessor :color_input_background

    attr_accessor :color_input_border

    attr_accessor :color_link

    attr_accessor :color_modal_background

    attr_accessor :color_primary

    attr_accessor :color_progress_bar

    attr_accessor :color_success

    attr_accessor :color_warning

    attr_accessor :color_divider

    attr_accessor :color_dropdown_background

    attr_accessor :color_dropdown_option

    attr_accessor :font_family

    attr_accessor :font_family_title

    attr_accessor :font_url

    attr_accessor :font_size_body

    attr_accessor :font_size_header

    attr_accessor :font_size_small

    attr_accessor :line_height_body

    attr_accessor :line_height_header

    attr_accessor :line_height_small

    attr_accessor :header_font_weight

    attr_accessor :header_margin_bottom

    attr_accessor :icon_color_primary

    attr_accessor :icon_color_highlight

    attr_accessor :icon_color_stroke

    attr_accessor :icon_color_background

    attr_accessor :icon_color_government_id_type

    attr_accessor :icon_style

    attr_accessor :input_style

    attr_accessor :page_transition

    attr_accessor :text_align

    attr_accessor :text_decoration_line_link

    attr_accessor :us_state_input_method

    attr_accessor :vertical_options_style

    attr_accessor :government_id_pictograph_position

    attr_accessor :id_back_pictograph_height

    attr_accessor :id_back_pictograph_url

    attr_accessor :id_front_pictograph_height

    attr_accessor :id_front_pictograph_url

    attr_accessor :passport_front_pictograph_height

    attr_accessor :passport_front_pictograph_url

    attr_accessor :passport_signature_pictograph_height

    attr_accessor :passport_signature_pictograph_url

    attr_accessor :government_id_select_pictograph_height

    attr_accessor :government_id_select_pictograph_url

    attr_accessor :device_handoff_terms_text_position

    attr_accessor :selfie_pictograph_url

    attr_accessor :selfie_pictograph_height

    attr_accessor :selfie_center_pictograph_url

    attr_accessor :selfie_center_pictograph_height

    attr_accessor :selfie_left_pictograph_url

    attr_accessor :selfie_left_pictograph_height

    attr_accessor :selfie_right_pictograph_url

    attr_accessor :selfie_right_pictograph_height

    attr_accessor :document_pictograph_position

    attr_accessor :document_pictograph_height

    attr_accessor :document_pictograph_url

    attr_accessor :camera_support_pictograph_height

    attr_accessor :camera_support_pictograph_url

    attr_accessor :loading_pictograph_height

    attr_accessor :loading_pictograph_url

    attr_accessor :navbar_logo_display

    attr_accessor :logo_url

    attr_accessor :logo

    attr_accessor :logo_data

    attr_accessor :logo_filename

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'border_radius' => :'border-radius',
        :'border_radius_input' => :'border-radius-input',
        :'border_radius_modal' => :'border-radius-modal',
        :'border_width' => :'border-width',
        :'border_width_input' => :'border-width-input',
        :'button_background_image' => :'button-background-image',
        :'button_font_weight' => :'button-font-weight',
        :'button_position' => :'button-position',
        :'button_shadow_strength' => :'button-shadow-strength',
        :'button_text_transform' => :'button-text-transform',
        :'color_button_primary' => :'color-button-primary',
        :'color_button_secondary' => :'color-button-secondary',
        :'color_button_secondary_fill' => :'color-button-secondary-fill',
        :'color_button_primary_fill_disabled' => :'color-button-primary-fill-disabled',
        :'color_button_secondary_fill_disabled' => :'color-button-secondary-fill-disabled',
        :'color_error' => :'color-error',
        :'color_font' => :'color-font',
        :'color_font_button_primary' => :'color-font-button-primary',
        :'color_font_button_secondary' => :'color-font-button-secondary',
        :'color_font_small' => :'color-font-small',
        :'color_font_title' => :'color-font-title',
        :'color_icon_header' => :'color-icon-header',
        :'color_input_background' => :'color-input-background',
        :'color_input_border' => :'color-input-border',
        :'color_link' => :'color-link',
        :'color_modal_background' => :'color-modal-background',
        :'color_primary' => :'color-primary',
        :'color_progress_bar' => :'color-progress-bar',
        :'color_success' => :'color-success',
        :'color_warning' => :'color-warning',
        :'color_divider' => :'color-divider',
        :'color_dropdown_background' => :'color-dropdown-background',
        :'color_dropdown_option' => :'color-dropdown-option',
        :'font_family' => :'font-family',
        :'font_family_title' => :'font-family-title',
        :'font_url' => :'font-url',
        :'font_size_body' => :'font-size-body',
        :'font_size_header' => :'font-size-header',
        :'font_size_small' => :'font-size-small',
        :'line_height_body' => :'line-height-body',
        :'line_height_header' => :'line-height-header',
        :'line_height_small' => :'line-height-small',
        :'header_font_weight' => :'header-font-weight',
        :'header_margin_bottom' => :'header-margin-bottom',
        :'icon_color_primary' => :'icon-color-primary',
        :'icon_color_highlight' => :'icon-color-highlight',
        :'icon_color_stroke' => :'icon-color-stroke',
        :'icon_color_background' => :'icon-color-background',
        :'icon_color_government_id_type' => :'icon-color-government-id-type',
        :'icon_style' => :'icon-style',
        :'input_style' => :'input-style',
        :'page_transition' => :'page-transition',
        :'text_align' => :'text-align',
        :'text_decoration_line_link' => :'text-decoration-line-link',
        :'us_state_input_method' => :'us-state-input-method',
        :'vertical_options_style' => :'vertical-options-style',
        :'government_id_pictograph_position' => :'government-id-pictograph-position',
        :'id_back_pictograph_height' => :'id-back-pictograph-height',
        :'id_back_pictograph_url' => :'id-back-pictograph-url',
        :'id_front_pictograph_height' => :'id-front-pictograph-height',
        :'id_front_pictograph_url' => :'id-front-pictograph-url',
        :'passport_front_pictograph_height' => :'passport-front-pictograph-height',
        :'passport_front_pictograph_url' => :'passport-front-pictograph-url',
        :'passport_signature_pictograph_height' => :'passport-signature-pictograph-height',
        :'passport_signature_pictograph_url' => :'passport-signature-pictograph-url',
        :'government_id_select_pictograph_height' => :'government-id-select-pictograph-height',
        :'government_id_select_pictograph_url' => :'government-id-select-pictograph-url',
        :'device_handoff_terms_text_position' => :'device-handoff-terms-text-position',
        :'selfie_pictograph_url' => :'selfie-pictograph-url',
        :'selfie_pictograph_height' => :'selfie-pictograph-height',
        :'selfie_center_pictograph_url' => :'selfie-center-pictograph-url',
        :'selfie_center_pictograph_height' => :'selfie-center-pictograph-height',
        :'selfie_left_pictograph_url' => :'selfie-left-pictograph-url',
        :'selfie_left_pictograph_height' => :'selfie-left-pictograph-height',
        :'selfie_right_pictograph_url' => :'selfie-right-pictograph-url',
        :'selfie_right_pictograph_height' => :'selfie-right-pictograph-height',
        :'document_pictograph_position' => :'document-pictograph-position',
        :'document_pictograph_height' => :'document-pictograph-height',
        :'document_pictograph_url' => :'document-pictograph-url',
        :'camera_support_pictograph_height' => :'camera-support-pictograph-height',
        :'camera_support_pictograph_url' => :'camera-support-pictograph-url',
        :'loading_pictograph_height' => :'loading-pictograph-height',
        :'loading_pictograph_url' => :'loading-pictograph-url',
        :'navbar_logo_display' => :'navbar-logo-display',
        :'logo_url' => :'logo-url',
        :'logo' => :'logo',
        :'logo_data' => :'logo-data',
        :'logo_filename' => :'logo-filename'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'border_radius' => :'String',
        :'border_radius_input' => :'String',
        :'border_radius_modal' => :'String',
        :'border_width' => :'String',
        :'border_width_input' => :'String',
        :'button_background_image' => :'String',
        :'button_font_weight' => :'String',
        :'button_position' => :'String',
        :'button_shadow_strength' => :'String',
        :'button_text_transform' => :'String',
        :'color_button_primary' => :'String',
        :'color_button_secondary' => :'String',
        :'color_button_secondary_fill' => :'String',
        :'color_button_primary_fill_disabled' => :'String',
        :'color_button_secondary_fill_disabled' => :'String',
        :'color_error' => :'String',
        :'color_font' => :'String',
        :'color_font_button_primary' => :'String',
        :'color_font_button_secondary' => :'String',
        :'color_font_small' => :'String',
        :'color_font_title' => :'String',
        :'color_icon_header' => :'String',
        :'color_input_background' => :'String',
        :'color_input_border' => :'String',
        :'color_link' => :'String',
        :'color_modal_background' => :'String',
        :'color_primary' => :'String',
        :'color_progress_bar' => :'String',
        :'color_success' => :'String',
        :'color_warning' => :'String',
        :'color_divider' => :'String',
        :'color_dropdown_background' => :'String',
        :'color_dropdown_option' => :'String',
        :'font_family' => :'String',
        :'font_family_title' => :'String',
        :'font_url' => :'String',
        :'font_size_body' => :'String',
        :'font_size_header' => :'String',
        :'font_size_small' => :'String',
        :'line_height_body' => :'String',
        :'line_height_header' => :'String',
        :'line_height_small' => :'String',
        :'header_font_weight' => :'String',
        :'header_margin_bottom' => :'String',
        :'icon_color_primary' => :'String',
        :'icon_color_highlight' => :'String',
        :'icon_color_stroke' => :'String',
        :'icon_color_background' => :'String',
        :'icon_color_government_id_type' => :'String',
        :'icon_style' => :'String',
        :'input_style' => :'String',
        :'page_transition' => :'String',
        :'text_align' => :'String',
        :'text_decoration_line_link' => :'String',
        :'us_state_input_method' => :'String',
        :'vertical_options_style' => :'String',
        :'government_id_pictograph_position' => :'String',
        :'id_back_pictograph_height' => :'String',
        :'id_back_pictograph_url' => :'String',
        :'id_front_pictograph_height' => :'String',
        :'id_front_pictograph_url' => :'String',
        :'passport_front_pictograph_height' => :'String',
        :'passport_front_pictograph_url' => :'String',
        :'passport_signature_pictograph_height' => :'String',
        :'passport_signature_pictograph_url' => :'String',
        :'government_id_select_pictograph_height' => :'String',
        :'government_id_select_pictograph_url' => :'String',
        :'device_handoff_terms_text_position' => :'String',
        :'selfie_pictograph_url' => :'String',
        :'selfie_pictograph_height' => :'String',
        :'selfie_center_pictograph_url' => :'String',
        :'selfie_center_pictograph_height' => :'String',
        :'selfie_left_pictograph_url' => :'String',
        :'selfie_left_pictograph_height' => :'String',
        :'selfie_right_pictograph_url' => :'String',
        :'selfie_right_pictograph_height' => :'String',
        :'document_pictograph_position' => :'String',
        :'document_pictograph_height' => :'String',
        :'document_pictograph_url' => :'String',
        :'camera_support_pictograph_height' => :'String',
        :'camera_support_pictograph_url' => :'String',
        :'loading_pictograph_height' => :'String',
        :'loading_pictograph_url' => :'String',
        :'navbar_logo_display' => :'String',
        :'logo_url' => :'String',
        :'logo' => :'String',
        :'logo_data' => :'String',
        :'logo_filename' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `PersonaAPIClient::InquiryTemplateVersionAttributesTheme` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `PersonaAPIClient::InquiryTemplateVersionAttributesTheme`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'border_radius')
        self.border_radius = attributes[:'border_radius']
      end

      if attributes.key?(:'border_radius_input')
        self.border_radius_input = attributes[:'border_radius_input']
      end

      if attributes.key?(:'border_radius_modal')
        self.border_radius_modal = attributes[:'border_radius_modal']
      end

      if attributes.key?(:'border_width')
        self.border_width = attributes[:'border_width']
      end

      if attributes.key?(:'border_width_input')
        self.border_width_input = attributes[:'border_width_input']
      end

      if attributes.key?(:'button_background_image')
        self.button_background_image = attributes[:'button_background_image']
      end

      if attributes.key?(:'button_font_weight')
        self.button_font_weight = attributes[:'button_font_weight']
      end

      if attributes.key?(:'button_position')
        self.button_position = attributes[:'button_position']
      end

      if attributes.key?(:'button_shadow_strength')
        self.button_shadow_strength = attributes[:'button_shadow_strength']
      end

      if attributes.key?(:'button_text_transform')
        self.button_text_transform = attributes[:'button_text_transform']
      end

      if attributes.key?(:'color_button_primary')
        self.color_button_primary = attributes[:'color_button_primary']
      end

      if attributes.key?(:'color_button_secondary')
        self.color_button_secondary = attributes[:'color_button_secondary']
      end

      if attributes.key?(:'color_button_secondary_fill')
        self.color_button_secondary_fill = attributes[:'color_button_secondary_fill']
      end

      if attributes.key?(:'color_button_primary_fill_disabled')
        self.color_button_primary_fill_disabled = attributes[:'color_button_primary_fill_disabled']
      end

      if attributes.key?(:'color_button_secondary_fill_disabled')
        self.color_button_secondary_fill_disabled = attributes[:'color_button_secondary_fill_disabled']
      end

      if attributes.key?(:'color_error')
        self.color_error = attributes[:'color_error']
      end

      if attributes.key?(:'color_font')
        self.color_font = attributes[:'color_font']
      end

      if attributes.key?(:'color_font_button_primary')
        self.color_font_button_primary = attributes[:'color_font_button_primary']
      end

      if attributes.key?(:'color_font_button_secondary')
        self.color_font_button_secondary = attributes[:'color_font_button_secondary']
      end

      if attributes.key?(:'color_font_small')
        self.color_font_small = attributes[:'color_font_small']
      end

      if attributes.key?(:'color_font_title')
        self.color_font_title = attributes[:'color_font_title']
      end

      if attributes.key?(:'color_icon_header')
        self.color_icon_header = attributes[:'color_icon_header']
      end

      if attributes.key?(:'color_input_background')
        self.color_input_background = attributes[:'color_input_background']
      end

      if attributes.key?(:'color_input_border')
        self.color_input_border = attributes[:'color_input_border']
      end

      if attributes.key?(:'color_link')
        self.color_link = attributes[:'color_link']
      end

      if attributes.key?(:'color_modal_background')
        self.color_modal_background = attributes[:'color_modal_background']
      end

      if attributes.key?(:'color_primary')
        self.color_primary = attributes[:'color_primary']
      end

      if attributes.key?(:'color_progress_bar')
        self.color_progress_bar = attributes[:'color_progress_bar']
      end

      if attributes.key?(:'color_success')
        self.color_success = attributes[:'color_success']
      end

      if attributes.key?(:'color_warning')
        self.color_warning = attributes[:'color_warning']
      end

      if attributes.key?(:'color_divider')
        self.color_divider = attributes[:'color_divider']
      end

      if attributes.key?(:'color_dropdown_background')
        self.color_dropdown_background = attributes[:'color_dropdown_background']
      end

      if attributes.key?(:'color_dropdown_option')
        self.color_dropdown_option = attributes[:'color_dropdown_option']
      end

      if attributes.key?(:'font_family')
        self.font_family = attributes[:'font_family']
      end

      if attributes.key?(:'font_family_title')
        self.font_family_title = attributes[:'font_family_title']
      end

      if attributes.key?(:'font_url')
        self.font_url = attributes[:'font_url']
      end

      if attributes.key?(:'font_size_body')
        self.font_size_body = attributes[:'font_size_body']
      end

      if attributes.key?(:'font_size_header')
        self.font_size_header = attributes[:'font_size_header']
      end

      if attributes.key?(:'font_size_small')
        self.font_size_small = attributes[:'font_size_small']
      end

      if attributes.key?(:'line_height_body')
        self.line_height_body = attributes[:'line_height_body']
      end

      if attributes.key?(:'line_height_header')
        self.line_height_header = attributes[:'line_height_header']
      end

      if attributes.key?(:'line_height_small')
        self.line_height_small = attributes[:'line_height_small']
      end

      if attributes.key?(:'header_font_weight')
        self.header_font_weight = attributes[:'header_font_weight']
      end

      if attributes.key?(:'header_margin_bottom')
        self.header_margin_bottom = attributes[:'header_margin_bottom']
      end

      if attributes.key?(:'icon_color_primary')
        self.icon_color_primary = attributes[:'icon_color_primary']
      end

      if attributes.key?(:'icon_color_highlight')
        self.icon_color_highlight = attributes[:'icon_color_highlight']
      end

      if attributes.key?(:'icon_color_stroke')
        self.icon_color_stroke = attributes[:'icon_color_stroke']
      end

      if attributes.key?(:'icon_color_background')
        self.icon_color_background = attributes[:'icon_color_background']
      end

      if attributes.key?(:'icon_color_government_id_type')
        self.icon_color_government_id_type = attributes[:'icon_color_government_id_type']
      end

      if attributes.key?(:'icon_style')
        self.icon_style = attributes[:'icon_style']
      end

      if attributes.key?(:'input_style')
        self.input_style = attributes[:'input_style']
      end

      if attributes.key?(:'page_transition')
        self.page_transition = attributes[:'page_transition']
      end

      if attributes.key?(:'text_align')
        self.text_align = attributes[:'text_align']
      end

      if attributes.key?(:'text_decoration_line_link')
        self.text_decoration_line_link = attributes[:'text_decoration_line_link']
      end

      if attributes.key?(:'us_state_input_method')
        self.us_state_input_method = attributes[:'us_state_input_method']
      end

      if attributes.key?(:'vertical_options_style')
        self.vertical_options_style = attributes[:'vertical_options_style']
      end

      if attributes.key?(:'government_id_pictograph_position')
        self.government_id_pictograph_position = attributes[:'government_id_pictograph_position']
      end

      if attributes.key?(:'id_back_pictograph_height')
        self.id_back_pictograph_height = attributes[:'id_back_pictograph_height']
      end

      if attributes.key?(:'id_back_pictograph_url')
        self.id_back_pictograph_url = attributes[:'id_back_pictograph_url']
      end

      if attributes.key?(:'id_front_pictograph_height')
        self.id_front_pictograph_height = attributes[:'id_front_pictograph_height']
      end

      if attributes.key?(:'id_front_pictograph_url')
        self.id_front_pictograph_url = attributes[:'id_front_pictograph_url']
      end

      if attributes.key?(:'passport_front_pictograph_height')
        self.passport_front_pictograph_height = attributes[:'passport_front_pictograph_height']
      end

      if attributes.key?(:'passport_front_pictograph_url')
        self.passport_front_pictograph_url = attributes[:'passport_front_pictograph_url']
      end

      if attributes.key?(:'passport_signature_pictograph_height')
        self.passport_signature_pictograph_height = attributes[:'passport_signature_pictograph_height']
      end

      if attributes.key?(:'passport_signature_pictograph_url')
        self.passport_signature_pictograph_url = attributes[:'passport_signature_pictograph_url']
      end

      if attributes.key?(:'government_id_select_pictograph_height')
        self.government_id_select_pictograph_height = attributes[:'government_id_select_pictograph_height']
      end

      if attributes.key?(:'government_id_select_pictograph_url')
        self.government_id_select_pictograph_url = attributes[:'government_id_select_pictograph_url']
      end

      if attributes.key?(:'device_handoff_terms_text_position')
        self.device_handoff_terms_text_position = attributes[:'device_handoff_terms_text_position']
      end

      if attributes.key?(:'selfie_pictograph_url')
        self.selfie_pictograph_url = attributes[:'selfie_pictograph_url']
      end

      if attributes.key?(:'selfie_pictograph_height')
        self.selfie_pictograph_height = attributes[:'selfie_pictograph_height']
      end

      if attributes.key?(:'selfie_center_pictograph_url')
        self.selfie_center_pictograph_url = attributes[:'selfie_center_pictograph_url']
      end

      if attributes.key?(:'selfie_center_pictograph_height')
        self.selfie_center_pictograph_height = attributes[:'selfie_center_pictograph_height']
      end

      if attributes.key?(:'selfie_left_pictograph_url')
        self.selfie_left_pictograph_url = attributes[:'selfie_left_pictograph_url']
      end

      if attributes.key?(:'selfie_left_pictograph_height')
        self.selfie_left_pictograph_height = attributes[:'selfie_left_pictograph_height']
      end

      if attributes.key?(:'selfie_right_pictograph_url')
        self.selfie_right_pictograph_url = attributes[:'selfie_right_pictograph_url']
      end

      if attributes.key?(:'selfie_right_pictograph_height')
        self.selfie_right_pictograph_height = attributes[:'selfie_right_pictograph_height']
      end

      if attributes.key?(:'document_pictograph_position')
        self.document_pictograph_position = attributes[:'document_pictograph_position']
      end

      if attributes.key?(:'document_pictograph_height')
        self.document_pictograph_height = attributes[:'document_pictograph_height']
      end

      if attributes.key?(:'document_pictograph_url')
        self.document_pictograph_url = attributes[:'document_pictograph_url']
      end

      if attributes.key?(:'camera_support_pictograph_height')
        self.camera_support_pictograph_height = attributes[:'camera_support_pictograph_height']
      end

      if attributes.key?(:'camera_support_pictograph_url')
        self.camera_support_pictograph_url = attributes[:'camera_support_pictograph_url']
      end

      if attributes.key?(:'loading_pictograph_height')
        self.loading_pictograph_height = attributes[:'loading_pictograph_height']
      end

      if attributes.key?(:'loading_pictograph_url')
        self.loading_pictograph_url = attributes[:'loading_pictograph_url']
      end

      if attributes.key?(:'navbar_logo_display')
        self.navbar_logo_display = attributes[:'navbar_logo_display']
      end

      if attributes.key?(:'logo_url')
        self.logo_url = attributes[:'logo_url']
      end

      if attributes.key?(:'logo')
        self.logo = attributes[:'logo']
      end

      if attributes.key?(:'logo_data')
        self.logo_data = attributes[:'logo_data']
      end

      if attributes.key?(:'logo_filename')
        self.logo_filename = attributes[:'logo_filename']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          border_radius == o.border_radius &&
          border_radius_input == o.border_radius_input &&
          border_radius_modal == o.border_radius_modal &&
          border_width == o.border_width &&
          border_width_input == o.border_width_input &&
          button_background_image == o.button_background_image &&
          button_font_weight == o.button_font_weight &&
          button_position == o.button_position &&
          button_shadow_strength == o.button_shadow_strength &&
          button_text_transform == o.button_text_transform &&
          color_button_primary == o.color_button_primary &&
          color_button_secondary == o.color_button_secondary &&
          color_button_secondary_fill == o.color_button_secondary_fill &&
          color_button_primary_fill_disabled == o.color_button_primary_fill_disabled &&
          color_button_secondary_fill_disabled == o.color_button_secondary_fill_disabled &&
          color_error == o.color_error &&
          color_font == o.color_font &&
          color_font_button_primary == o.color_font_button_primary &&
          color_font_button_secondary == o.color_font_button_secondary &&
          color_font_small == o.color_font_small &&
          color_font_title == o.color_font_title &&
          color_icon_header == o.color_icon_header &&
          color_input_background == o.color_input_background &&
          color_input_border == o.color_input_border &&
          color_link == o.color_link &&
          color_modal_background == o.color_modal_background &&
          color_primary == o.color_primary &&
          color_progress_bar == o.color_progress_bar &&
          color_success == o.color_success &&
          color_warning == o.color_warning &&
          color_divider == o.color_divider &&
          color_dropdown_background == o.color_dropdown_background &&
          color_dropdown_option == o.color_dropdown_option &&
          font_family == o.font_family &&
          font_family_title == o.font_family_title &&
          font_url == o.font_url &&
          font_size_body == o.font_size_body &&
          font_size_header == o.font_size_header &&
          font_size_small == o.font_size_small &&
          line_height_body == o.line_height_body &&
          line_height_header == o.line_height_header &&
          line_height_small == o.line_height_small &&
          header_font_weight == o.header_font_weight &&
          header_margin_bottom == o.header_margin_bottom &&
          icon_color_primary == o.icon_color_primary &&
          icon_color_highlight == o.icon_color_highlight &&
          icon_color_stroke == o.icon_color_stroke &&
          icon_color_background == o.icon_color_background &&
          icon_color_government_id_type == o.icon_color_government_id_type &&
          icon_style == o.icon_style &&
          input_style == o.input_style &&
          page_transition == o.page_transition &&
          text_align == o.text_align &&
          text_decoration_line_link == o.text_decoration_line_link &&
          us_state_input_method == o.us_state_input_method &&
          vertical_options_style == o.vertical_options_style &&
          government_id_pictograph_position == o.government_id_pictograph_position &&
          id_back_pictograph_height == o.id_back_pictograph_height &&
          id_back_pictograph_url == o.id_back_pictograph_url &&
          id_front_pictograph_height == o.id_front_pictograph_height &&
          id_front_pictograph_url == o.id_front_pictograph_url &&
          passport_front_pictograph_height == o.passport_front_pictograph_height &&
          passport_front_pictograph_url == o.passport_front_pictograph_url &&
          passport_signature_pictograph_height == o.passport_signature_pictograph_height &&
          passport_signature_pictograph_url == o.passport_signature_pictograph_url &&
          government_id_select_pictograph_height == o.government_id_select_pictograph_height &&
          government_id_select_pictograph_url == o.government_id_select_pictograph_url &&
          device_handoff_terms_text_position == o.device_handoff_terms_text_position &&
          selfie_pictograph_url == o.selfie_pictograph_url &&
          selfie_pictograph_height == o.selfie_pictograph_height &&
          selfie_center_pictograph_url == o.selfie_center_pictograph_url &&
          selfie_center_pictograph_height == o.selfie_center_pictograph_height &&
          selfie_left_pictograph_url == o.selfie_left_pictograph_url &&
          selfie_left_pictograph_height == o.selfie_left_pictograph_height &&
          selfie_right_pictograph_url == o.selfie_right_pictograph_url &&
          selfie_right_pictograph_height == o.selfie_right_pictograph_height &&
          document_pictograph_position == o.document_pictograph_position &&
          document_pictograph_height == o.document_pictograph_height &&
          document_pictograph_url == o.document_pictograph_url &&
          camera_support_pictograph_height == o.camera_support_pictograph_height &&
          camera_support_pictograph_url == o.camera_support_pictograph_url &&
          loading_pictograph_height == o.loading_pictograph_height &&
          loading_pictograph_url == o.loading_pictograph_url &&
          navbar_logo_display == o.navbar_logo_display &&
          logo_url == o.logo_url &&
          logo == o.logo &&
          logo_data == o.logo_data &&
          logo_filename == o.logo_filename
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [border_radius, border_radius_input, border_radius_modal, border_width, border_width_input, button_background_image, button_font_weight, button_position, button_shadow_strength, button_text_transform, color_button_primary, color_button_secondary, color_button_secondary_fill, color_button_primary_fill_disabled, color_button_secondary_fill_disabled, color_error, color_font, color_font_button_primary, color_font_button_secondary, color_font_small, color_font_title, color_icon_header, color_input_background, color_input_border, color_link, color_modal_background, color_primary, color_progress_bar, color_success, color_warning, color_divider, color_dropdown_background, color_dropdown_option, font_family, font_family_title, font_url, font_size_body, font_size_header, font_size_small, line_height_body, line_height_header, line_height_small, header_font_weight, header_margin_bottom, icon_color_primary, icon_color_highlight, icon_color_stroke, icon_color_background, icon_color_government_id_type, icon_style, input_style, page_transition, text_align, text_decoration_line_link, us_state_input_method, vertical_options_style, government_id_pictograph_position, id_back_pictograph_height, id_back_pictograph_url, id_front_pictograph_height, id_front_pictograph_url, passport_front_pictograph_height, passport_front_pictograph_url, passport_signature_pictograph_height, passport_signature_pictograph_url, government_id_select_pictograph_height, government_id_select_pictograph_url, device_handoff_terms_text_position, selfie_pictograph_url, selfie_pictograph_height, selfie_center_pictograph_url, selfie_center_pictograph_height, selfie_left_pictograph_url, selfie_left_pictograph_height, selfie_right_pictograph_url, selfie_right_pictograph_height, document_pictograph_position, document_pictograph_height, document_pictograph_url, camera_support_pictograph_height, camera_support_pictograph_url, loading_pictograph_height, loading_pictograph_url, navbar_logo_display, logo_url, logo, logo_data, logo_filename].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = PersonaAPIClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
