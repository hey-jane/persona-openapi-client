=begin
#Persona API Reference

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2023-01-05
Contact: support@withpersona.com
Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module PersonaAPIClient
  class DocumentGovernmentIdAttributes
    # Possible values: - initiated - submitted - processed - errored  Do not assume this is a static enumeration; Persona may add new values in the future without a versioned update.
    attr_accessor :status

    attr_accessor :created_at

    attr_accessor :processed_at

    attr_accessor :processed_at_ts

    # Street name of residence address.
    attr_accessor :address_street_1

    # Extension of residence address, usually apartment or suite number.
    attr_accessor :address_street_2

    # City of residence address. Not all international addresses use this attribute.
    attr_accessor :address_city

    # State or subdivision of residence address. In the US, this should be the unabbreviated name. Not all international addresses use this attribute.
    attr_accessor :address_subdivision

    # ZIP or postal code of residence address. Not all international addresses use this attribute.
    attr_accessor :address_postal_code

    attr_accessor :front_photo

    attr_accessor :back_photo

    attr_accessor :selfie_photo

    attr_accessor :id_class

    # Given or first name.
    attr_accessor :name_first

    # Middle name.
    attr_accessor :name_middle

    # Family or last name.
    attr_accessor :name_last

    attr_accessor :name_suffix

    attr_accessor :birthdate

    attr_accessor :issuing_authority

    attr_accessor :issuing_subdivision

    attr_accessor :nationality

    attr_accessor :document_number

    attr_accessor :visa_status

    attr_accessor :issue_date

    attr_accessor :expiration_date

    attr_accessor :designations

    attr_accessor :birthplace

    attr_accessor :height

    attr_accessor :sex

    attr_accessor :endorsements

    attr_accessor :restrictions

    attr_accessor :vehicle_class

    attr_accessor :identification_number

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'status' => :'status',
        :'created_at' => :'created-at',
        :'processed_at' => :'processed-at',
        :'processed_at_ts' => :'processed-at-ts',
        :'address_street_1' => :'address-street-1',
        :'address_street_2' => :'address-street-2',
        :'address_city' => :'address-city',
        :'address_subdivision' => :'address-subdivision',
        :'address_postal_code' => :'address-postal-code',
        :'front_photo' => :'front-photo',
        :'back_photo' => :'back-photo',
        :'selfie_photo' => :'selfie-photo',
        :'id_class' => :'id-class',
        :'name_first' => :'name-first',
        :'name_middle' => :'name-middle',
        :'name_last' => :'name-last',
        :'name_suffix' => :'name-suffix',
        :'birthdate' => :'birthdate',
        :'issuing_authority' => :'issuing-authority',
        :'issuing_subdivision' => :'issuing-subdivision',
        :'nationality' => :'nationality',
        :'document_number' => :'document-number',
        :'visa_status' => :'visa-status',
        :'issue_date' => :'issue-date',
        :'expiration_date' => :'expiration-date',
        :'designations' => :'designations',
        :'birthplace' => :'birthplace',
        :'height' => :'height',
        :'sex' => :'sex',
        :'endorsements' => :'endorsements',
        :'restrictions' => :'restrictions',
        :'vehicle_class' => :'vehicle-class',
        :'identification_number' => :'identification-number'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'status' => :'String',
        :'created_at' => :'Time',
        :'processed_at' => :'Time',
        :'processed_at_ts' => :'Integer',
        :'address_street_1' => :'String',
        :'address_street_2' => :'String',
        :'address_city' => :'String',
        :'address_subdivision' => :'String',
        :'address_postal_code' => :'String',
        :'front_photo' => :'Object',
        :'back_photo' => :'Object',
        :'selfie_photo' => :'Object',
        :'id_class' => :'String',
        :'name_first' => :'String',
        :'name_middle' => :'String',
        :'name_last' => :'String',
        :'name_suffix' => :'String',
        :'birthdate' => :'Date',
        :'issuing_authority' => :'String',
        :'issuing_subdivision' => :'String',
        :'nationality' => :'String',
        :'document_number' => :'String',
        :'visa_status' => :'String',
        :'issue_date' => :'Date',
        :'expiration_date' => :'Date',
        :'designations' => :'Array<String>',
        :'birthplace' => :'String',
        :'height' => :'String',
        :'sex' => :'String',
        :'endorsements' => :'String',
        :'restrictions' => :'String',
        :'vehicle_class' => :'String',
        :'identification_number' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'id_class',
        :'name_first',
        :'name_middle',
        :'name_last',
        :'name_suffix',
        :'birthdate',
        :'issuing_authority',
        :'issuing_subdivision',
        :'nationality',
        :'document_number',
        :'visa_status',
        :'issue_date',
        :'expiration_date',
        :'designations',
        :'birthplace',
        :'height',
        :'sex',
        :'endorsements',
        :'restrictions',
        :'vehicle_class',
        :'identification_number'
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'AddressFields',
      :'DocumentSharedAttributes'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `PersonaAPIClient::DocumentGovernmentIdAttributes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `PersonaAPIClient::DocumentGovernmentIdAttributes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'processed_at')
        self.processed_at = attributes[:'processed_at']
      end

      if attributes.key?(:'processed_at_ts')
        self.processed_at_ts = attributes[:'processed_at_ts']
      end

      if attributes.key?(:'address_street_1')
        self.address_street_1 = attributes[:'address_street_1']
      end

      if attributes.key?(:'address_street_2')
        self.address_street_2 = attributes[:'address_street_2']
      end

      if attributes.key?(:'address_city')
        self.address_city = attributes[:'address_city']
      end

      if attributes.key?(:'address_subdivision')
        self.address_subdivision = attributes[:'address_subdivision']
      end

      if attributes.key?(:'address_postal_code')
        self.address_postal_code = attributes[:'address_postal_code']
      end

      if attributes.key?(:'front_photo')
        self.front_photo = attributes[:'front_photo']
      end

      if attributes.key?(:'back_photo')
        self.back_photo = attributes[:'back_photo']
      end

      if attributes.key?(:'selfie_photo')
        self.selfie_photo = attributes[:'selfie_photo']
      end

      if attributes.key?(:'id_class')
        self.id_class = attributes[:'id_class']
      end

      if attributes.key?(:'name_first')
        self.name_first = attributes[:'name_first']
      end

      if attributes.key?(:'name_middle')
        self.name_middle = attributes[:'name_middle']
      end

      if attributes.key?(:'name_last')
        self.name_last = attributes[:'name_last']
      end

      if attributes.key?(:'name_suffix')
        self.name_suffix = attributes[:'name_suffix']
      end

      if attributes.key?(:'birthdate')
        self.birthdate = attributes[:'birthdate']
      end

      if attributes.key?(:'issuing_authority')
        self.issuing_authority = attributes[:'issuing_authority']
      end

      if attributes.key?(:'issuing_subdivision')
        self.issuing_subdivision = attributes[:'issuing_subdivision']
      end

      if attributes.key?(:'nationality')
        self.nationality = attributes[:'nationality']
      end

      if attributes.key?(:'document_number')
        self.document_number = attributes[:'document_number']
      end

      if attributes.key?(:'visa_status')
        self.visa_status = attributes[:'visa_status']
      end

      if attributes.key?(:'issue_date')
        self.issue_date = attributes[:'issue_date']
      end

      if attributes.key?(:'expiration_date')
        self.expiration_date = attributes[:'expiration_date']
      end

      if attributes.key?(:'designations')
        if (value = attributes[:'designations']).is_a?(Array)
          self.designations = value
        end
      end

      if attributes.key?(:'birthplace')
        self.birthplace = attributes[:'birthplace']
      end

      if attributes.key?(:'height')
        self.height = attributes[:'height']
      end

      if attributes.key?(:'sex')
        self.sex = attributes[:'sex']
      end

      if attributes.key?(:'endorsements')
        self.endorsements = attributes[:'endorsements']
      end

      if attributes.key?(:'restrictions')
        self.restrictions = attributes[:'restrictions']
      end

      if attributes.key?(:'vehicle_class')
        self.vehicle_class = attributes[:'vehicle_class']
      end

      if attributes.key?(:'identification_number')
        self.identification_number = attributes[:'identification_number']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          status == o.status &&
          created_at == o.created_at &&
          processed_at == o.processed_at &&
          processed_at_ts == o.processed_at_ts &&
          address_street_1 == o.address_street_1 &&
          address_street_2 == o.address_street_2 &&
          address_city == o.address_city &&
          address_subdivision == o.address_subdivision &&
          address_postal_code == o.address_postal_code &&
          front_photo == o.front_photo &&
          back_photo == o.back_photo &&
          selfie_photo == o.selfie_photo &&
          id_class == o.id_class &&
          name_first == o.name_first &&
          name_middle == o.name_middle &&
          name_last == o.name_last &&
          name_suffix == o.name_suffix &&
          birthdate == o.birthdate &&
          issuing_authority == o.issuing_authority &&
          issuing_subdivision == o.issuing_subdivision &&
          nationality == o.nationality &&
          document_number == o.document_number &&
          visa_status == o.visa_status &&
          issue_date == o.issue_date &&
          expiration_date == o.expiration_date &&
          designations == o.designations &&
          birthplace == o.birthplace &&
          height == o.height &&
          sex == o.sex &&
          endorsements == o.endorsements &&
          restrictions == o.restrictions &&
          vehicle_class == o.vehicle_class &&
          identification_number == o.identification_number
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [status, created_at, processed_at, processed_at_ts, address_street_1, address_street_2, address_city, address_subdivision, address_postal_code, front_photo, back_photo, selfie_photo, id_class, name_first, name_middle, name_last, name_suffix, birthdate, issuing_authority, issuing_subdivision, nationality, document_number, visa_status, issue_date, expiration_date, designations, birthplace, height, sex, endorsements, restrictions, vehicle_class, identification_number].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = PersonaAPIClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
