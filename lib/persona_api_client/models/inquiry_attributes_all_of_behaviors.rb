=begin
#Persona API Reference

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2023-01-05
Contact: support@withpersona.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'date'
require 'time'

module PersonaAPIClient
  class InquiryAttributesAllOfBehaviors
    attr_accessor :autofill_cancels

    attr_accessor :autofill_starts

    attr_accessor :behavior_threat_level

    attr_accessor :completion_time

    attr_accessor :devtools_open

    attr_accessor :distraction_events

    attr_accessor :hesitation_baseline

    attr_accessor :hesitation_count

    attr_accessor :hesitation_percentage

    attr_accessor :hesitation_time

    attr_accessor :request_spoof_attempts

    attr_accessor :shortcut_copies

    attr_accessor :shortcut_pastes

    attr_accessor :user_agent_spoof_attempts

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'autofill_cancels' => :'autofill-cancels',
        :'autofill_starts' => :'autofill-starts',
        :'behavior_threat_level' => :'behavior-threat-level',
        :'completion_time' => :'completion-time',
        :'devtools_open' => :'devtools-open',
        :'distraction_events' => :'distraction-events',
        :'hesitation_baseline' => :'hesitation-baseline',
        :'hesitation_count' => :'hesitation-count',
        :'hesitation_percentage' => :'hesitation-percentage',
        :'hesitation_time' => :'hesitation-time',
        :'request_spoof_attempts' => :'request-spoof-attempts',
        :'shortcut_copies' => :'shortcut-copies',
        :'shortcut_pastes' => :'shortcut-pastes',
        :'user_agent_spoof_attempts' => :'user-agent-spoof-attempts'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'autofill_cancels' => :'Integer',
        :'autofill_starts' => :'Integer',
        :'behavior_threat_level' => :'String',
        :'completion_time' => :'Float',
        :'devtools_open' => :'Boolean',
        :'distraction_events' => :'Integer',
        :'hesitation_baseline' => :'Integer',
        :'hesitation_count' => :'Integer',
        :'hesitation_percentage' => :'Float',
        :'hesitation_time' => :'Integer',
        :'request_spoof_attempts' => :'Integer',
        :'shortcut_copies' => :'Integer',
        :'shortcut_pastes' => :'Integer',
        :'user_agent_spoof_attempts' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `PersonaAPIClient::InquiryAttributesAllOfBehaviors` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `PersonaAPIClient::InquiryAttributesAllOfBehaviors`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'autofill_cancels')
        self.autofill_cancels = attributes[:'autofill_cancels']
      else
        self.autofill_cancels = 0
      end

      if attributes.key?(:'autofill_starts')
        self.autofill_starts = attributes[:'autofill_starts']
      else
        self.autofill_starts = 0
      end

      if attributes.key?(:'behavior_threat_level')
        self.behavior_threat_level = attributes[:'behavior_threat_level']
      end

      if attributes.key?(:'completion_time')
        self.completion_time = attributes[:'completion_time']
      else
        self.completion_time = 0
      end

      if attributes.key?(:'devtools_open')
        self.devtools_open = attributes[:'devtools_open']
      else
        self.devtools_open = true
      end

      if attributes.key?(:'distraction_events')
        self.distraction_events = attributes[:'distraction_events']
      else
        self.distraction_events = 0
      end

      if attributes.key?(:'hesitation_baseline')
        self.hesitation_baseline = attributes[:'hesitation_baseline']
      else
        self.hesitation_baseline = 0
      end

      if attributes.key?(:'hesitation_count')
        self.hesitation_count = attributes[:'hesitation_count']
      else
        self.hesitation_count = 0
      end

      if attributes.key?(:'hesitation_percentage')
        self.hesitation_percentage = attributes[:'hesitation_percentage']
      else
        self.hesitation_percentage = 0
      end

      if attributes.key?(:'hesitation_time')
        self.hesitation_time = attributes[:'hesitation_time']
      else
        self.hesitation_time = 0
      end

      if attributes.key?(:'request_spoof_attempts')
        self.request_spoof_attempts = attributes[:'request_spoof_attempts']
      else
        self.request_spoof_attempts = 0
      end

      if attributes.key?(:'shortcut_copies')
        self.shortcut_copies = attributes[:'shortcut_copies']
      else
        self.shortcut_copies = 0
      end

      if attributes.key?(:'shortcut_pastes')
        self.shortcut_pastes = attributes[:'shortcut_pastes']
      else
        self.shortcut_pastes = 0
      end

      if attributes.key?(:'user_agent_spoof_attempts')
        self.user_agent_spoof_attempts = attributes[:'user_agent_spoof_attempts']
      else
        self.user_agent_spoof_attempts = 0
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          autofill_cancels == o.autofill_cancels &&
          autofill_starts == o.autofill_starts &&
          behavior_threat_level == o.behavior_threat_level &&
          completion_time == o.completion_time &&
          devtools_open == o.devtools_open &&
          distraction_events == o.distraction_events &&
          hesitation_baseline == o.hesitation_baseline &&
          hesitation_count == o.hesitation_count &&
          hesitation_percentage == o.hesitation_percentage &&
          hesitation_time == o.hesitation_time &&
          request_spoof_attempts == o.request_spoof_attempts &&
          shortcut_copies == o.shortcut_copies &&
          shortcut_pastes == o.shortcut_pastes &&
          user_agent_spoof_attempts == o.user_agent_spoof_attempts
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [autofill_cancels, autofill_starts, behavior_threat_level, completion_time, devtools_open, distraction_events, hesitation_baseline, hesitation_count, hesitation_percentage, hesitation_time, request_spoof_attempts, shortcut_copies, shortcut_pastes, user_agent_spoof_attempts].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = PersonaAPIClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
