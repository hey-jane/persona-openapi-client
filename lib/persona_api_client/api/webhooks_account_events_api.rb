=begin
#Persona API Reference

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2023-01-05
Contact: support@withpersona.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module PersonaAPIClient
  class WebhooksAccountEventsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Account archived
    # Webhook for the `account.archived` event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :persona_signature Header. An HMAC that you should use to check that requests are authentic. Compare this value with your own digest, computed from the request body and your webhook secret. For more info see [Webhook Best Practices](https://docs.withpersona.com/docs/webhooks-best-practices).
    # @option opts [Integer] :persona_webhook_attempts_made The number of times that Persona has attempted to deliver this webhook. This value is incremented each time Persona attempts to deliver the webhook, regardless of whether the delivery was successful.
    # @option opts [Integer] :persona_webhook_attempts_left The number of times that Persona will attempt to deliver this webhook. This value is decremented each time Persona attempts to deliver the webhook.
    # @option opts [Integer] :persona_webhook_first_attempted_at The time at which Persona first attempted to deliver this webhook. This value is a Unix timestamp in seconds.
    # @option opts [WebhookAccountArchivedRequest] :webhook_account_archived_request 
    # @return [nil]
    def webhook_account_archived(opts = {})
      webhook_account_archived_with_http_info(opts)
      nil
    end

    # Account archived
    # Webhook for the &#x60;account.archived&#x60; event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :persona_signature Header. An HMAC that you should use to check that requests are authentic. Compare this value with your own digest, computed from the request body and your webhook secret. For more info see [Webhook Best Practices](https://docs.withpersona.com/docs/webhooks-best-practices).
    # @option opts [Integer] :persona_webhook_attempts_made The number of times that Persona has attempted to deliver this webhook. This value is incremented each time Persona attempts to deliver the webhook, regardless of whether the delivery was successful.
    # @option opts [Integer] :persona_webhook_attempts_left The number of times that Persona will attempt to deliver this webhook. This value is decremented each time Persona attempts to deliver the webhook.
    # @option opts [Integer] :persona_webhook_first_attempted_at The time at which Persona first attempted to deliver this webhook. This value is a Unix timestamp in seconds.
    # @option opts [WebhookAccountArchivedRequest] :webhook_account_archived_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def webhook_account_archived_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksAccountEventsApi.webhook_account_archived ...'
      end
      # resource path
      local_var_path = '/account.archived'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Persona-Signature'] = opts[:'persona_signature'] if !opts[:'persona_signature'].nil?
      header_params[:'Persona-Webhook-Attempts-Made'] = opts[:'persona_webhook_attempts_made'] if !opts[:'persona_webhook_attempts_made'].nil?
      header_params[:'Persona-Webhook-Attempts-Left'] = opts[:'persona_webhook_attempts_left'] if !opts[:'persona_webhook_attempts_left'].nil?
      header_params[:'Persona-Webhook-First-Attempted-At'] = opts[:'persona_webhook_first_attempted_at'] if !opts[:'persona_webhook_first_attempted_at'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'webhook_account_archived_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"WebhooksAccountEventsApi.webhook_account_archived",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksAccountEventsApi#webhook_account_archived\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Account consolidated
    # Webhook for the `account.consolidated` event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :persona_signature Header. An HMAC that you should use to check that requests are authentic. Compare this value with your own digest, computed from the request body and your webhook secret. For more info see [Webhook Best Practices](https://docs.withpersona.com/docs/webhooks-best-practices).
    # @option opts [Integer] :persona_webhook_attempts_made The number of times that Persona has attempted to deliver this webhook. This value is incremented each time Persona attempts to deliver the webhook, regardless of whether the delivery was successful.
    # @option opts [Integer] :persona_webhook_attempts_left The number of times that Persona will attempt to deliver this webhook. This value is decremented each time Persona attempts to deliver the webhook.
    # @option opts [Integer] :persona_webhook_first_attempted_at The time at which Persona first attempted to deliver this webhook. This value is a Unix timestamp in seconds.
    # @option opts [WebhookAccountConsolidatedRequest] :webhook_account_consolidated_request 
    # @return [nil]
    def webhook_account_consolidated(opts = {})
      webhook_account_consolidated_with_http_info(opts)
      nil
    end

    # Account consolidated
    # Webhook for the &#x60;account.consolidated&#x60; event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :persona_signature Header. An HMAC that you should use to check that requests are authentic. Compare this value with your own digest, computed from the request body and your webhook secret. For more info see [Webhook Best Practices](https://docs.withpersona.com/docs/webhooks-best-practices).
    # @option opts [Integer] :persona_webhook_attempts_made The number of times that Persona has attempted to deliver this webhook. This value is incremented each time Persona attempts to deliver the webhook, regardless of whether the delivery was successful.
    # @option opts [Integer] :persona_webhook_attempts_left The number of times that Persona will attempt to deliver this webhook. This value is decremented each time Persona attempts to deliver the webhook.
    # @option opts [Integer] :persona_webhook_first_attempted_at The time at which Persona first attempted to deliver this webhook. This value is a Unix timestamp in seconds.
    # @option opts [WebhookAccountConsolidatedRequest] :webhook_account_consolidated_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def webhook_account_consolidated_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksAccountEventsApi.webhook_account_consolidated ...'
      end
      # resource path
      local_var_path = '/account.consolidated'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Persona-Signature'] = opts[:'persona_signature'] if !opts[:'persona_signature'].nil?
      header_params[:'Persona-Webhook-Attempts-Made'] = opts[:'persona_webhook_attempts_made'] if !opts[:'persona_webhook_attempts_made'].nil?
      header_params[:'Persona-Webhook-Attempts-Left'] = opts[:'persona_webhook_attempts_left'] if !opts[:'persona_webhook_attempts_left'].nil?
      header_params[:'Persona-Webhook-First-Attempted-At'] = opts[:'persona_webhook_first_attempted_at'] if !opts[:'persona_webhook_first_attempted_at'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'webhook_account_consolidated_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"WebhooksAccountEventsApi.webhook_account_consolidated",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksAccountEventsApi#webhook_account_consolidated\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Account created
    # Webhook for the `account.created` event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :persona_signature Header. An HMAC that you should use to check that requests are authentic. Compare this value with your own digest, computed from the request body and your webhook secret. For more info see [Webhook Best Practices](https://docs.withpersona.com/docs/webhooks-best-practices).
    # @option opts [Integer] :persona_webhook_attempts_made The number of times that Persona has attempted to deliver this webhook. This value is incremented each time Persona attempts to deliver the webhook, regardless of whether the delivery was successful.
    # @option opts [Integer] :persona_webhook_attempts_left The number of times that Persona will attempt to deliver this webhook. This value is decremented each time Persona attempts to deliver the webhook.
    # @option opts [Integer] :persona_webhook_first_attempted_at The time at which Persona first attempted to deliver this webhook. This value is a Unix timestamp in seconds.
    # @option opts [WebhookAccountCreatedRequest] :webhook_account_created_request 
    # @return [nil]
    def webhook_account_created(opts = {})
      webhook_account_created_with_http_info(opts)
      nil
    end

    # Account created
    # Webhook for the &#x60;account.created&#x60; event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :persona_signature Header. An HMAC that you should use to check that requests are authentic. Compare this value with your own digest, computed from the request body and your webhook secret. For more info see [Webhook Best Practices](https://docs.withpersona.com/docs/webhooks-best-practices).
    # @option opts [Integer] :persona_webhook_attempts_made The number of times that Persona has attempted to deliver this webhook. This value is incremented each time Persona attempts to deliver the webhook, regardless of whether the delivery was successful.
    # @option opts [Integer] :persona_webhook_attempts_left The number of times that Persona will attempt to deliver this webhook. This value is decremented each time Persona attempts to deliver the webhook.
    # @option opts [Integer] :persona_webhook_first_attempted_at The time at which Persona first attempted to deliver this webhook. This value is a Unix timestamp in seconds.
    # @option opts [WebhookAccountCreatedRequest] :webhook_account_created_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def webhook_account_created_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksAccountEventsApi.webhook_account_created ...'
      end
      # resource path
      local_var_path = '/account.created'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Persona-Signature'] = opts[:'persona_signature'] if !opts[:'persona_signature'].nil?
      header_params[:'Persona-Webhook-Attempts-Made'] = opts[:'persona_webhook_attempts_made'] if !opts[:'persona_webhook_attempts_made'].nil?
      header_params[:'Persona-Webhook-Attempts-Left'] = opts[:'persona_webhook_attempts_left'] if !opts[:'persona_webhook_attempts_left'].nil?
      header_params[:'Persona-Webhook-First-Attempted-At'] = opts[:'persona_webhook_first_attempted_at'] if !opts[:'persona_webhook_first_attempted_at'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'webhook_account_created_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"WebhooksAccountEventsApi.webhook_account_created",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksAccountEventsApi#webhook_account_created\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Account redacted
    # Webhook for the `account.redacted` event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :persona_signature Header. An HMAC that you should use to check that requests are authentic. Compare this value with your own digest, computed from the request body and your webhook secret. For more info see [Webhook Best Practices](https://docs.withpersona.com/docs/webhooks-best-practices).
    # @option opts [Integer] :persona_webhook_attempts_made The number of times that Persona has attempted to deliver this webhook. This value is incremented each time Persona attempts to deliver the webhook, regardless of whether the delivery was successful.
    # @option opts [Integer] :persona_webhook_attempts_left The number of times that Persona will attempt to deliver this webhook. This value is decremented each time Persona attempts to deliver the webhook.
    # @option opts [Integer] :persona_webhook_first_attempted_at The time at which Persona first attempted to deliver this webhook. This value is a Unix timestamp in seconds.
    # @option opts [WebhookAccountRedactedRequest] :webhook_account_redacted_request 
    # @return [nil]
    def webhook_account_redacted(opts = {})
      webhook_account_redacted_with_http_info(opts)
      nil
    end

    # Account redacted
    # Webhook for the &#x60;account.redacted&#x60; event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :persona_signature Header. An HMAC that you should use to check that requests are authentic. Compare this value with your own digest, computed from the request body and your webhook secret. For more info see [Webhook Best Practices](https://docs.withpersona.com/docs/webhooks-best-practices).
    # @option opts [Integer] :persona_webhook_attempts_made The number of times that Persona has attempted to deliver this webhook. This value is incremented each time Persona attempts to deliver the webhook, regardless of whether the delivery was successful.
    # @option opts [Integer] :persona_webhook_attempts_left The number of times that Persona will attempt to deliver this webhook. This value is decremented each time Persona attempts to deliver the webhook.
    # @option opts [Integer] :persona_webhook_first_attempted_at The time at which Persona first attempted to deliver this webhook. This value is a Unix timestamp in seconds.
    # @option opts [WebhookAccountRedactedRequest] :webhook_account_redacted_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def webhook_account_redacted_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksAccountEventsApi.webhook_account_redacted ...'
      end
      # resource path
      local_var_path = '/account.redacted'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Persona-Signature'] = opts[:'persona_signature'] if !opts[:'persona_signature'].nil?
      header_params[:'Persona-Webhook-Attempts-Made'] = opts[:'persona_webhook_attempts_made'] if !opts[:'persona_webhook_attempts_made'].nil?
      header_params[:'Persona-Webhook-Attempts-Left'] = opts[:'persona_webhook_attempts_left'] if !opts[:'persona_webhook_attempts_left'].nil?
      header_params[:'Persona-Webhook-First-Attempted-At'] = opts[:'persona_webhook_first_attempted_at'] if !opts[:'persona_webhook_first_attempted_at'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'webhook_account_redacted_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"WebhooksAccountEventsApi.webhook_account_redacted",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksAccountEventsApi#webhook_account_redacted\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Account restored
    # Webhook for the `account.restored` event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :persona_signature Header. An HMAC that you should use to check that requests are authentic. Compare this value with your own digest, computed from the request body and your webhook secret. For more info see [Webhook Best Practices](https://docs.withpersona.com/docs/webhooks-best-practices).
    # @option opts [Integer] :persona_webhook_attempts_made The number of times that Persona has attempted to deliver this webhook. This value is incremented each time Persona attempts to deliver the webhook, regardless of whether the delivery was successful.
    # @option opts [Integer] :persona_webhook_attempts_left The number of times that Persona will attempt to deliver this webhook. This value is decremented each time Persona attempts to deliver the webhook.
    # @option opts [Integer] :persona_webhook_first_attempted_at The time at which Persona first attempted to deliver this webhook. This value is a Unix timestamp in seconds.
    # @option opts [WebhookAccountRestoredRequest] :webhook_account_restored_request 
    # @return [nil]
    def webhook_account_restored(opts = {})
      webhook_account_restored_with_http_info(opts)
      nil
    end

    # Account restored
    # Webhook for the &#x60;account.restored&#x60; event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :persona_signature Header. An HMAC that you should use to check that requests are authentic. Compare this value with your own digest, computed from the request body and your webhook secret. For more info see [Webhook Best Practices](https://docs.withpersona.com/docs/webhooks-best-practices).
    # @option opts [Integer] :persona_webhook_attempts_made The number of times that Persona has attempted to deliver this webhook. This value is incremented each time Persona attempts to deliver the webhook, regardless of whether the delivery was successful.
    # @option opts [Integer] :persona_webhook_attempts_left The number of times that Persona will attempt to deliver this webhook. This value is decremented each time Persona attempts to deliver the webhook.
    # @option opts [Integer] :persona_webhook_first_attempted_at The time at which Persona first attempted to deliver this webhook. This value is a Unix timestamp in seconds.
    # @option opts [WebhookAccountRestoredRequest] :webhook_account_restored_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def webhook_account_restored_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksAccountEventsApi.webhook_account_restored ...'
      end
      # resource path
      local_var_path = '/account.restored'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Persona-Signature'] = opts[:'persona_signature'] if !opts[:'persona_signature'].nil?
      header_params[:'Persona-Webhook-Attempts-Made'] = opts[:'persona_webhook_attempts_made'] if !opts[:'persona_webhook_attempts_made'].nil?
      header_params[:'Persona-Webhook-Attempts-Left'] = opts[:'persona_webhook_attempts_left'] if !opts[:'persona_webhook_attempts_left'].nil?
      header_params[:'Persona-Webhook-First-Attempted-At'] = opts[:'persona_webhook_first_attempted_at'] if !opts[:'persona_webhook_first_attempted_at'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'webhook_account_restored_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"WebhooksAccountEventsApi.webhook_account_restored",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksAccountEventsApi#webhook_account_restored\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Account tag added
    # Webhook for the `account.tag-added` event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :persona_signature Header. An HMAC that you should use to check that requests are authentic. Compare this value with your own digest, computed from the request body and your webhook secret. For more info see [Webhook Best Practices](https://docs.withpersona.com/docs/webhooks-best-practices).
    # @option opts [Integer] :persona_webhook_attempts_made The number of times that Persona has attempted to deliver this webhook. This value is incremented each time Persona attempts to deliver the webhook, regardless of whether the delivery was successful.
    # @option opts [Integer] :persona_webhook_attempts_left The number of times that Persona will attempt to deliver this webhook. This value is decremented each time Persona attempts to deliver the webhook.
    # @option opts [Integer] :persona_webhook_first_attempted_at The time at which Persona first attempted to deliver this webhook. This value is a Unix timestamp in seconds.
    # @option opts [WebhookAccountTagAddedRequest] :webhook_account_tag_added_request 
    # @return [nil]
    def webhook_account_tag_added(opts = {})
      webhook_account_tag_added_with_http_info(opts)
      nil
    end

    # Account tag added
    # Webhook for the &#x60;account.tag-added&#x60; event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :persona_signature Header. An HMAC that you should use to check that requests are authentic. Compare this value with your own digest, computed from the request body and your webhook secret. For more info see [Webhook Best Practices](https://docs.withpersona.com/docs/webhooks-best-practices).
    # @option opts [Integer] :persona_webhook_attempts_made The number of times that Persona has attempted to deliver this webhook. This value is incremented each time Persona attempts to deliver the webhook, regardless of whether the delivery was successful.
    # @option opts [Integer] :persona_webhook_attempts_left The number of times that Persona will attempt to deliver this webhook. This value is decremented each time Persona attempts to deliver the webhook.
    # @option opts [Integer] :persona_webhook_first_attempted_at The time at which Persona first attempted to deliver this webhook. This value is a Unix timestamp in seconds.
    # @option opts [WebhookAccountTagAddedRequest] :webhook_account_tag_added_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def webhook_account_tag_added_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksAccountEventsApi.webhook_account_tag_added ...'
      end
      # resource path
      local_var_path = '/account.tag-added'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Persona-Signature'] = opts[:'persona_signature'] if !opts[:'persona_signature'].nil?
      header_params[:'Persona-Webhook-Attempts-Made'] = opts[:'persona_webhook_attempts_made'] if !opts[:'persona_webhook_attempts_made'].nil?
      header_params[:'Persona-Webhook-Attempts-Left'] = opts[:'persona_webhook_attempts_left'] if !opts[:'persona_webhook_attempts_left'].nil?
      header_params[:'Persona-Webhook-First-Attempted-At'] = opts[:'persona_webhook_first_attempted_at'] if !opts[:'persona_webhook_first_attempted_at'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'webhook_account_tag_added_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"WebhooksAccountEventsApi.webhook_account_tag_added",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksAccountEventsApi#webhook_account_tag_added\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Account tag removed
    # Webhook for the `account.tag-removed` event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :persona_signature Header. An HMAC that you should use to check that requests are authentic. Compare this value with your own digest, computed from the request body and your webhook secret. For more info see [Webhook Best Practices](https://docs.withpersona.com/docs/webhooks-best-practices).
    # @option opts [Integer] :persona_webhook_attempts_made The number of times that Persona has attempted to deliver this webhook. This value is incremented each time Persona attempts to deliver the webhook, regardless of whether the delivery was successful.
    # @option opts [Integer] :persona_webhook_attempts_left The number of times that Persona will attempt to deliver this webhook. This value is decremented each time Persona attempts to deliver the webhook.
    # @option opts [Integer] :persona_webhook_first_attempted_at The time at which Persona first attempted to deliver this webhook. This value is a Unix timestamp in seconds.
    # @option opts [WebhookAccountTagRemovedRequest] :webhook_account_tag_removed_request 
    # @return [nil]
    def webhook_account_tag_removed(opts = {})
      webhook_account_tag_removed_with_http_info(opts)
      nil
    end

    # Account tag removed
    # Webhook for the &#x60;account.tag-removed&#x60; event. For more info see [Webhooks Overview](https://docs.withpersona.com/docs/webhooks).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :persona_signature Header. An HMAC that you should use to check that requests are authentic. Compare this value with your own digest, computed from the request body and your webhook secret. For more info see [Webhook Best Practices](https://docs.withpersona.com/docs/webhooks-best-practices).
    # @option opts [Integer] :persona_webhook_attempts_made The number of times that Persona has attempted to deliver this webhook. This value is incremented each time Persona attempts to deliver the webhook, regardless of whether the delivery was successful.
    # @option opts [Integer] :persona_webhook_attempts_left The number of times that Persona will attempt to deliver this webhook. This value is decremented each time Persona attempts to deliver the webhook.
    # @option opts [Integer] :persona_webhook_first_attempted_at The time at which Persona first attempted to deliver this webhook. This value is a Unix timestamp in seconds.
    # @option opts [WebhookAccountTagRemovedRequest] :webhook_account_tag_removed_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def webhook_account_tag_removed_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksAccountEventsApi.webhook_account_tag_removed ...'
      end
      # resource path
      local_var_path = '/account.tag-removed'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Persona-Signature'] = opts[:'persona_signature'] if !opts[:'persona_signature'].nil?
      header_params[:'Persona-Webhook-Attempts-Made'] = opts[:'persona_webhook_attempts_made'] if !opts[:'persona_webhook_attempts_made'].nil?
      header_params[:'Persona-Webhook-Attempts-Left'] = opts[:'persona_webhook_attempts_left'] if !opts[:'persona_webhook_attempts_left'].nil?
      header_params[:'Persona-Webhook-First-Attempted-At'] = opts[:'persona_webhook_first_attempted_at'] if !opts[:'persona_webhook_first_attempted_at'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'webhook_account_tag_removed_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"WebhooksAccountEventsApi.webhook_account_tag_removed",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksAccountEventsApi#webhook_account_tag_removed\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
