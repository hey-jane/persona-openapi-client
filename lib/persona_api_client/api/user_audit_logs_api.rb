=begin
#Persona API Reference

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2023-01-05
Contact: support@withpersona.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module PersonaAPIClient
  class UserAuditLogsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List all User Audit Logs
    # Returns a list of your organization’s user audit logs for up to the most recent 6 months.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :key_inflection Determines casing for the API response
    # @option opts [String] :idempotency_key Ensures the request is idempotent
    # @option opts [String] :persona_version  (default to '2023-01-05')
    # @option opts [ListAllAccountsPageParameter] :page 
    # @option opts [String] :fields A comma-separated list of attributes to include in the response. This can be used to customize which attributes will be serialized in the response. See [Serialization](https://docs.withpersona.com/reference/serialization#sparse-fieldsets) for more details.
    # @return [ListAllUserAuditLogs200Response]
    def list_all_user_audit_logs(opts = {})
      data, _status_code, _headers = list_all_user_audit_logs_with_http_info(opts)
      data
    end

    # List all User Audit Logs
    # Returns a list of your organization’s user audit logs for up to the most recent 6 months.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :key_inflection Determines casing for the API response
    # @option opts [String] :idempotency_key Ensures the request is idempotent
    # @option opts [String] :persona_version  (default to '2023-01-05')
    # @option opts [ListAllAccountsPageParameter] :page 
    # @option opts [String] :fields A comma-separated list of attributes to include in the response. This can be used to customize which attributes will be serialized in the response. See [Serialization](https://docs.withpersona.com/reference/serialization#sparse-fieldsets) for more details.
    # @return [Array<(ListAllUserAuditLogs200Response, Integer, Hash)>] ListAllUserAuditLogs200Response data, response status code and response headers
    def list_all_user_audit_logs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserAuditLogsApi.list_all_user_audit_logs ...'
      end
      allowable_values = ["camel", "kebab", "snake"]
      if @api_client.config.client_side_validation && opts[:'key_inflection'] && !allowable_values.include?(opts[:'key_inflection'])
        fail ArgumentError, "invalid value for \"key_inflection\", must be one of #{allowable_values}"
      end
      allowable_values = ["2023-01-05"]
      if @api_client.config.client_side_validation && opts[:'persona_version'] && !allowable_values.include?(opts[:'persona_version'])
        fail ArgumentError, "invalid value for \"persona_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/user-audit-logs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'Key-Inflection'] = opts[:'key_inflection'] if !opts[:'key_inflection'].nil?
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?
      header_params[:'Persona-Version'] = opts[:'persona_version'] if !opts[:'persona_version'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListAllUserAuditLogs200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UserAuditLogsApi.list_all_user_audit_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserAuditLogsApi#list_all_user_audit_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an User Audit Log
    # Retrieves the details of an existing user audit logs for up to the most recent 6 months.
    # @param user_audit_log_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :key_inflection Determines casing for the API response
    # @option opts [String] :idempotency_key Ensures the request is idempotent
    # @option opts [String] :persona_version  (default to '2023-01-05')
    # @option opts [String] :include A comma-separated list of relationship paths. This can be used to customize which related resources will be fully serialized in the &#x60;included&#x60; key in the response. See [Serialization](https://docs.withpersona.com/reference/serialization#inclusion-of-related-resources) for more details.
    # @option opts [String] :fields A comma-separated list of attributes to include in the response. This can be used to customize which attributes will be serialized in the response. See [Serialization](https://docs.withpersona.com/reference/serialization#sparse-fieldsets) for more details.
    # @return [RetrieveAnUserAuditLog200Response]
    def retrieve_an_user_audit_log(user_audit_log_id, opts = {})
      data, _status_code, _headers = retrieve_an_user_audit_log_with_http_info(user_audit_log_id, opts)
      data
    end

    # Retrieve an User Audit Log
    # Retrieves the details of an existing user audit logs for up to the most recent 6 months.
    # @param user_audit_log_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :key_inflection Determines casing for the API response
    # @option opts [String] :idempotency_key Ensures the request is idempotent
    # @option opts [String] :persona_version  (default to '2023-01-05')
    # @option opts [String] :include A comma-separated list of relationship paths. This can be used to customize which related resources will be fully serialized in the &#x60;included&#x60; key in the response. See [Serialization](https://docs.withpersona.com/reference/serialization#inclusion-of-related-resources) for more details.
    # @option opts [String] :fields A comma-separated list of attributes to include in the response. This can be used to customize which attributes will be serialized in the response. See [Serialization](https://docs.withpersona.com/reference/serialization#sparse-fieldsets) for more details.
    # @return [Array<(RetrieveAnUserAuditLog200Response, Integer, Hash)>] RetrieveAnUserAuditLog200Response data, response status code and response headers
    def retrieve_an_user_audit_log_with_http_info(user_audit_log_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserAuditLogsApi.retrieve_an_user_audit_log ...'
      end
      # verify the required parameter 'user_audit_log_id' is set
      if @api_client.config.client_side_validation && user_audit_log_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_audit_log_id' when calling UserAuditLogsApi.retrieve_an_user_audit_log"
      end
      allowable_values = ["camel", "kebab", "snake"]
      if @api_client.config.client_side_validation && opts[:'key_inflection'] && !allowable_values.include?(opts[:'key_inflection'])
        fail ArgumentError, "invalid value for \"key_inflection\", must be one of #{allowable_values}"
      end
      allowable_values = ["2023-01-05"]
      if @api_client.config.client_side_validation && opts[:'persona_version'] && !allowable_values.include?(opts[:'persona_version'])
        fail ArgumentError, "invalid value for \"persona_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/user-audit-logs/{user-audit-log-id}'.sub('{' + 'user-audit-log-id' + '}', CGI.escape(user_audit_log_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'Key-Inflection'] = opts[:'key_inflection'] if !opts[:'key_inflection'].nil?
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?
      header_params[:'Persona-Version'] = opts[:'persona_version'] if !opts[:'persona_version'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RetrieveAnUserAuditLog200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UserAuditLogsApi.retrieve_an_user_audit_log",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserAuditLogsApi#retrieve_an_user_audit_log\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
